// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  // provider  = "postgresql"
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum ProjectStatus {
  IDEA
  IN_PROGRESS
  REVIEW
  DONE
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // hashed password for credentials provider (nullable for OAuth)
  role          Role      @default(USER)
  projectsAuth  ProjectAuthor[]  // relation to projects via ProjectAuthor if needed

  Audit Audit[]
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  authorPrincipal String? 
  status      ProjectStatus @default(IDEA)
  dueDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authors     ProjectAuthor[]
}

model Author {
  id        String          @id @default(cuid())
  name      String
  email     String?         @unique
  projects  ProjectAuthor[]
}

model ProjectAuthor {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  String
  role      String?

  User User[]
}

model Audit {
  id         String   @id @default(cuid())
  actorId    String?              // id de l'utilisateur qui a déclenché l'action (nullable si système)
  actor      User?    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  action     String              // e.g. "createProject", "updateProject", "deleteProject", "createNote"
  resourceId String?             // id de la ressource affectée (projectId, noteId, ...)
  resource   String?             // type de ressource (e.g. "Project", "Note")
  meta       Json?               // données additionnelles structurées (objet)
  ip         String?             // ip (optionnel)
  userAgent  String?             // user agent (optionnel)
  level      String   @default("info") // info|warn|error|audit
  createdAt  DateTime @default(now())

  @@index([actorId])
  @@index([resourceId])
  @@index([createdAt])
}
